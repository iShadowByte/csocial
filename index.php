<?php namespace CloakerFacil;use Exception;use DOMDocument;use DOMXPath;class LogConstants{public const LOG_ENABLED=true;public const LOG_FILE="log_view.log";public const MAX_LOG_SIZE=5242880;public const MAX_LOG_AGE=604800;}class CacheConstants{public const CACHE_ENABLED=false;public const CACHE_PATH="_cache/";public const CACHE_EXPIRATION=86400;}class ApiConstants{public const API_URL="https://api.cloakerfacil.com.br";public const CAMPAIGN_KEY="5bPzkLCc9364698e5074cec1eca46ccfe2f9f07dd1ca7jUrB6";public const TOKEN="K0ZsnPMpof745c99de6c0b035593c237bf4b4b0cdqM6dP3lV7";}class Application{public function run(string $target):void{try{$cacheEnabled=CacheConstants::CACHE_ENABLED;if($cacheEnabled){$cacheFile=$this->getCacheFile();if($this->isCacheValid($cacheFile)){$content=$this->loadCacheContent($cacheFile);}else{$content=$this->handleContent($target,$cacheEnabled);$this->storeCacheContent($content);}}else{$content=$this->handleContent($target,$cacheEnabled);}echo $content;}catch(Exception $e){Logger::logError("Erro durante o processamento da requisição: ".$e->getMessage());}}private function handleContent(string $target,bool $cacheEnabled):string{try{if(FileLoader::isValidFile($target)){return FileLoader::loadLocalFileContent($target);}if(DomainLoader::isValidDomain($target)){$extractedDomain=Application::extractDomainFromURL($target);if($extractedDomain===$_SERVER["HTTP_HOST"]){$filePath=Application::extractFilePathFromURL($target);if(FileLoader::isValidFile($filePath)){return FileLoader::loadLocalFileContent($filePath);}}else{return ExternalSiteLoader::loadExternalSiteContent($target);}}$errorMessage="O alvo não é um domínio válido nem um arquivo válido.";Logger::logError($errorMessage);return "";}catch(Exception $e){Logger::logError("Erro ao processar conteúdo: ".$e->getMessage());return "";}}public function getCacheFile():string{$ip=filter_var($_SERVER["REMOTE_ADDR"],FILTER_VALIDATE_IP)?:"unknown_ip";$referer=$_SERVER["HTTP_REFERER"]?? "";$page=(!empty($_SERVER["HTTPS"])&&$_SERVER["HTTPS"]!=="off")||$_SERVER["SERVER_PORT"]==443?"https://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]:"http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"];$cacheDir=realpath(CacheConstants::CACHE_PATH).DIRECTORY_SEPARATOR.$ip;if(!is_dir($cacheDir)&&!mkdir($cacheDir,0755,true)){Logger::logError("Não foi possível criar o diretório de cache. Verifique as permissões do servidor.");}$cacheKey=md5($referer.$page);return $cacheDir.DIRECTORY_SEPARATOR.$cacheKey.".json";}public function isCacheValid(string $cacheFile):bool{try{if(!is_file($cacheFile)||!is_readable($cacheFile)){return false;}$cacheTime=@filemtime($cacheFile);if($cacheTime===false){Logger::logError("Falha ao ler o horário de modificação do arquivo de cache: {$cacheFile}");return false;}$currentTime=time();$timeDiff=$currentTime-$cacheTime;if($timeDiff<CacheConstants::CACHE_EXPIRATION){return true;}else{if(@unlink($cacheFile)===false){Logger::logError("Falha ao deletar o arquivo de cache: {$cacheFile}");}return false;}}catch(\Throwable $e){Logger::logError("Ocorreu um erro inesperado em isCacheValid: {$e->getMessage()}");return false;}}private function storeCacheContent(string $content):void{try{$compressedContent=gzcompress($content,9);$cacheFile=$this->getCacheFile();$bytesWritten=file_put_contents($cacheFile,$compressedContent);if($bytesWritten===false){Logger::logError("Falha ao salvar o conteúdo no arquivo de cache: {$cacheFile}");}}catch(\Throwable $e){$errorMessage="Ocorreu um erro ao armazenar o conteúdo em cache: {$e->getMessage()}";Logger::logError($errorMessage);}}public function loadCacheContent(string $cacheFile):string{try{if(!is_file($cacheFile)||!is_readable($cacheFile)){Logger::logError("Arquivo de cache não encontrado ou não é legível: {$cacheFile}");}$compressedContent=file_get_contents($cacheFile);if($compressedContent===false){Logger::logError("Falha ao ler o conteúdo do arquivo de cache: {$cacheFile}");}$content=gzuncompress($compressedContent);if($content===false){Logger::logError("Falha ao descomprimir o conteúdo do cache: {$cacheFile}");}return $content;}catch(\Throwable $e){$errorMessage="Ocorreu um erro ao carregar o conteúdo do cache: {$e->getMessage()}";Logger::logError($errorMessage);return "";}}public static function extractDomainFromURL(string $queryParams):string{preg_match("/^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?(.*)/",$queryParams,$matches);if(isset($matches[1])){return $matches[1];}self::logExtractionError("domínio",$queryParams);return "";}public static function extractFilePathFromURL(string $queryParams):string{$parsedUrl=parse_url($queryParams);if(isset($parsedUrl["path"])){$path=$parsedUrl["path"];$target=self::extractDomainFromURL($queryParams);$path=str_replace($target,"",$path);$path=ltrim($path,"/");return $path;}self::logExtractionError("caminho do arquivo",$queryParams);return "";}private static function logExtractionError(string $item,string $queryParams):void{$errorMessage="Não foi possível extrair o $item da URL: $queryParams";Logger::logError($errorMessage);}}class DomainLoader{public static function isValidDomain(string $target):bool{if(filter_var($target,FILTER_VALIDATE_IP)){return true;}if(checkdnsrr($target)){return true;}$parsedUrl=parse_url($target,PHP_URL_HOST)?:parse_url($target,PHP_URL_PATH);if($parsedUrl){if(checkdnsrr($parsedUrl,'A')||checkdnsrr($parsedUrl,'AAAA')){return true;}}$ip=gethostbyname($target);if($ip!=$target){return true;}Logger::logError("O alvo não é um domínio válido: ".$target);return false;}}class FileLoader{public static function isValidFile(string $relativePath):bool{$basePath=rtrim(dirname(__FILE__),"/");$absolutePath=realpath($basePath."/".ltrim($relativePath,"/"));if(file_exists($absolutePath)&&is_file($absolutePath)){return true;}else{return false;}}public static function loadLocalFileContent(string $relativePath):string{$basePath=rtrim(dirname(__FILE__),"/");$absolutePath=realpath($basePath."/".ltrim($relativePath,"/"));if(file_exists($absolutePath)&&is_file($absolutePath)){$content=file_get_contents($absolutePath);if($content!==false){return $content;}else{Logger::logError("Erro ao ler o arquivo: ".$relativePath);}}Logger::logError("O arquivo não existe ou não é válido: ".$relativePath);return "";}}class ExternalSiteLoader{public static function loadExternalSiteContent(string $queryParams):string{$url=self::prepareUrl($queryParams);$data=self::loadUrlWithCurl($url);if($data===false){$data=self::loadUrlWithFileGetContents($url);if($data===false){$data=self::loadUrlWithGuzzleHttpClient($url);}}if($data===false){Logger::logError("Falha ao carregar o conteúdo do site: ".$url);return "";}$data=self::fixPathsResources($data,$url);$data=self::addFontAwesomeStyles($data);$substituicoes=self::loadReplacesFromFile('replaces');$data=self::replaceAllLinksHTML($data,$substituicoes);return $data;}public static function loadReplacesFromFile(string $fileName):array{$filePath=__DIR__."/{$fileName}.json";if(!file_exists($filePath)){return[];}$jsonContent=file_get_contents($filePath);$substituicoes=json_decode($jsonContent,true);return is_array($substituicoes)?$substituicoes:[];}public static function replaceAllLinksHTML(string $html,array $substituicoes):string{foreach($substituicoes as $linkOriginal=>$novoLink){$html=str_replace($linkOriginal,$novoLink,$html);$html=preg_replace('/\b'.preg_quote($linkOriginal,'/').'\b/',$novoLink,$html);}return $html;}private static function fixPathsResources(string $html,string $baseUrl):string{$dom=new DOMDocument();libxml_use_internal_errors(true);$dom->loadHTML($html);libxml_clear_errors();$xpath=new DOMXPath($dom);$imgTags=$xpath->query("//img");foreach($imgTags as $imgTag){$src=$imgTag->getAttribute('src');$newSrc=self::createAbsoluteUrl($src,$baseUrl);$imgTag->setAttribute('src',$newSrc);$srcset=$imgTag->getAttribute('srcset');if(!empty($srcset)){$newSrcset=self::fixSrcset($srcset,$baseUrl);$imgTag->setAttribute('srcset',$newSrcset);}}$scriptTags=$xpath->query("//script");foreach($scriptTags as $scriptTag){$src=$scriptTag->getAttribute('src');if(!empty($src)){$newSrc=self::createAbsoluteUrl($src,$baseUrl);$scriptTag->setAttribute('src',$newSrc);}}$linkTags=$xpath->query("//link[@rel='stylesheet']");foreach($linkTags as $linkTag){$href=$linkTag->getAttribute('href');$newHref=self::createAbsoluteUrl($href,$baseUrl);$linkTag->setAttribute('href',$newHref);}$styleTags=$xpath->query("//style");foreach($styleTags as $styleTag){$styleContent=$styleTag->textContent;$styleContent=self::fixPathsInternalStyles($styleContent,$baseUrl);$styleTag->textContent=$styleContent;}return $dom->saveHTML();}private static function fixPathsInternalStyles(string $styles,string $baseUrl):string{$styles=preg_replace_callback('/url\([\'"]?(.*?)[\'"]?\)/i',function($matches)use($baseUrl){$url=$matches[1];$newUrl=self::createAbsoluteUrl($url,$baseUrl);return"url('$newUrl')";},$styles);return $styles;}private static function fixSrcset(string $srcset,string $baseUrl):string{$sources=explode(',',$srcset);$newSources=[];foreach($sources as $source){$parts=explode(' ',trim($source));if(count($parts)===2){$url=$parts[0];$size=$parts[1];$newUrl=self::createAbsoluteUrl($url,$baseUrl);$newSources[]="$newUrl $size";}}return implode(', ',$newSources);}private static function createAbsoluteUrl(string $urlRelativa,string $baseUrl):string{if(strpos($urlRelativa,'http://')===0||strpos($urlRelativa,'https://')===0){return $urlRelativa;}elseif(strpos($urlRelativa,'/')===0){$parsedUrl=parse_url($baseUrl);return $parsedUrl['scheme'].'://'.$parsedUrl['host'].$urlRelativa;}return $urlRelativa;}private static function addFontAwesomeStyles(string $html):string{$dom=new DOMDocument();libxml_use_internal_errors(true);$dom->loadHTML($html,LIBXML_HTML_NOIMPLIED|LIBXML_HTML_NODEFDTD);libxml_clear_errors();$head=$dom->getElementsByTagName('head')->item(0);$fontAwesomeStyles=["https://site-assets.fontawesome.com/releases/v6.4.2/css/all.css","https://site-assets.fontawesome.com/releases/v6.4.2/css/sharp-solid.css","https://site-assets.fontawesome.com/releases/v6.4.2/css/sharp-regular.css","https://site-assets.fontawesome.com/releases/v6.4.2/css/sharp-light.css",];foreach($fontAwesomeStyles as $style){$link=$dom->createElement('link');$link->setAttribute('rel','stylesheet');$link->setAttribute('href',$style);$head->appendChild($link);}return $dom->saveHTML();}private static function prepareUrl(string $url):string{if(!preg_match("~^(?:f|ht)tps?://~i",$url)){$url="https://".$url;}return $url;}private static function loadUrlWithCurl(string $queryParams){$curlHandler=curl_init();curl_setopt_array($curlHandler,[CURLOPT_URL=>$queryParams,CURLOPT_RETURNTRANSFER=>true,CURLOPT_FOLLOWLOCATION=>true,CURLOPT_USERAGENT=>"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36",CURLOPT_HTTPHEADER=>["Origin: ".$queryParams,],CURLOPT_COOKIEJAR=>"cookies.txt",CURLOPT_COOKIEFILE=>"cookies.txt",]);$data=curl_exec($curlHandler);if($data===false){Logger::logDebug("Falha ao carregar a URL {$queryParams} com cURL: ".curl_error($curlHandler));}curl_close($curlHandler);return($data!==false)?$data:false;}private static function loadUrlWithFileGetContents(string $queryParams){try{$options=["http"=>["method"=>"GET","header"=>["Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","Accept-Language: pt-BR,en;q=0.5","Referer: ".$queryParams,"Origin: ".$queryParams,],],];$context=stream_context_create($options);$data=file_get_contents($queryParams,false,$context);if($data===false){throw new Exception("Falha ao obter o conteúdo da URL com file_get_contents");}return $data;}catch(Exception $e){Logger::logDebug("Falha ao carregar a URL {$queryParams} com file_get_contents: {$e->getMessage()}");return false;}}private static function loadUrlWithGuzzleHttpClient(string $queryParams){try{throw new Exception("Biblioteca Guzzle HTTP Client não configurada");}catch(Exception $e){Logger::logDebug("Falha ao carregar a URL {$queryParams} com Guzzle: {$e->getMessage()}");return false;}}}class FileLogger{private const LOG_LEVEL_ERROR="ERROR";private const LOG_LEVEL_DEBUG="DEBUG";private string $logFile;public function __construct(string $logFile){$this->logFile=$logFile;}public function logMessage(string $message,string $logLevel=self::LOG_LEVEL_ERROR):void{if($logLevel===self::LOG_LEVEL_ERROR||$logLevel===self::LOG_LEVEL_DEBUG){if(!$this->isLogFileExceededMaxSize()){$timestamp=date("d-m-Y H:i:s");$logMessage="[{$timestamp}] [{$logLevel}] {$message}\n";file_put_contents($this->logFile,$logMessage,FILE_APPEND);}else{$this->rotateLogFile();$this->logMessage($message,$logLevel);}}else{$this->logMessage("O nível de log especificado é inválido $logLevel",self::LOG_LEVEL_ERROR);}}private function isLogFileExceededMaxSize():bool{return(filesize($this->logFile)>=LogConstants::MAX_LOG_SIZE);}private function rotateLogFile():void{$backupFile=$this->logFile.".bak";if(file_exists($backupFile)){unlink($backupFile);}rename($this->logFile,$backupFile);$this->cleanupOldLogs();}private function cleanupOldLogs():void{$logFiles=glob($this->logFile.".*");foreach($logFiles as $file){$fileAge=time()-filemtime($file);if($fileAge>LogConstants::MAX_LOG_AGE){unlink($file);}}}}class Logger{private const LOG_LEVEL_ERROR="ERROR";private const LOG_LEVEL_DEBUG="DEBUG";private static?FileLogger $logger=null;public static function logError(string $message):void{self::getLoggerInstance()->logMessage($message,self::LOG_LEVEL_ERROR);}public static function logDebug(string $message):void{self::getLoggerInstance()->logMessage("DEBUG: {$message}",self::LOG_LEVEL_DEBUG);}private static function getLoggerInstance():FileLogger{if(self::$logger===null){self::$logger=new FileLogger(LogConstants::LOG_FILE);}return self::$logger;}}class ApiRequester{public static function buildApiUrl():string{$queryParams=["ip"=>filter_var($_SERVER["REMOTE_ADDR"],FILTER_VALIDATE_IP),"domain"=>preg_replace("#^(https?://)?(wwwd?.)?([^/?]+)(.*)#","$3",$_SERVER["HTTP_HOST"]),"campaign"=>ApiConstants::CAMPAIGN_KEY,"token"=>ApiConstants::TOKEN,"userAgent"=>$_SERVER["HTTP_USER_AGENT"],"language"=>self::getBrowserLanguage(),"page"=>urlencode((!empty($_SERVER["HTTPS"])&&$_SERVER["HTTPS"]!=="off")?"https://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]:"http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]),"referer"=>@$_SERVER["HTTP_REFERER"]];return ApiConstants::API_URL."?".http_build_query($queryParams);}private static function setupCurl(string $queryParams){$curl=curl_init();curl_setopt_array($curl,[CURLOPT_URL=>$queryParams,CURLOPT_RETURNTRANSFER=>true,CURLOPT_HTTP_VERSION=>CURL_HTTP_VERSION_2_0,CURLOPT_HTTPHEADER=>["Accept: application/json","HTTP_X_REQUESTED_WITH: XMLHttpRequest"],]);return $curl;}private static function getBrowserLanguage(){if(isset($_SERVER["HTTP_ACCEPT_LANGUAGE"])){$languages=explode(",",$_SERVER["HTTP_ACCEPT_LANGUAGE"]);return $languages[0];}$serverInfo=urldecode(http_build_query($_SERVER));if(preg_match("/HTTP_ACCEPT_LANGUAGE=([^&]+)/",$serverInfo,$matches)){$languages=explode(",",$matches[1]);return $languages[0];}}public static function getApiResponse(string $queryParams):array{$curl=self::setupCurl($queryParams);$responseData=curl_exec($curl);if($responseData===false){$errorMessage="Erro ao executar solicitação cURL para URL {$queryParams}: ".curl_error($curl);throw new ApiRequestException($errorMessage,$queryParams);}$response=json_decode($responseData,true);if($response===null){$errorMessage="Erro ao decodificar a resposta JSON do URL {$queryParams}: ".json_last_error_msg();throw new ApiRequestException($errorMessage,$queryParams);}if(isset($response["error"])){throw new ApiRequestException($response["error"],$queryParams);}curl_close($curl);return $response;}}class PageHandler{private Application $app;public function __construct(Application $app){$this->app=$app;}public function handleApiResponse(array $response):void{if(!$this->isValidApiResponse($response)){throw new ApiResponseException("O destino não foi encontrado na resposta da API.",$response);}$target=$response["target"];$this->app->run($target);}private function isValidApiResponse(array $response):bool{return(array_key_exists("target",$response)&&strlen($response["target"])>=4);}}class ApiRequestException extends Exception{private $requestUrl;public function __construct(string $message,string $requestUrl){parent::__construct($message);$this->requestUrl=$requestUrl;}public function getRequestUrl():string{return $this->requestUrl;}}class ApiResponseException extends Exception{private $apiResponse;public function __construct(string $message,array $apiResponse){parent::__construct($message);$this->apiResponse=$apiResponse;}public function getApiResponse():array{return $this->apiResponse;}}class FileNotFoundException extends Exception{private $filePath;public function __construct(string $message,string $filePath){parent::__construct($message);$this->filePath=$filePath;}public function getFilePath():string{return $this->filePath;}}try{function createApplication(FileLogger $logger=null):Application{if(LogConstants::LOG_ENABLED&&$logger!==null){return new Application($logger);}else{return new Application();}}function createPageHandler():PageHandler{return new PageHandler(new Application());}function handleCacheAndApi(Application $app):void{if(CacheConstants::CACHE_ENABLED){$cacheFile=$app->getCacheFile();if(file_exists($cacheFile)&&$app->isCacheValid($cacheFile)){$content=$app->loadCacheContent($cacheFile);echo $content;}else{$apiUrl=ApiRequester::buildApiUrl();$response=ApiRequester::getApiResponse($apiUrl);$pageHandler=createPageHandler();$pageHandler->handleApiResponse($response);return;}}else{$apiUrl=ApiRequester::buildApiUrl();$response=ApiRequester::getApiResponse($apiUrl);$pageHandler=createPageHandler();$pageHandler->handleApiResponse($response);}}$logger=new FileLogger(LogConstants::LOG_FILE);$app=createApplication($logger);handleCacheAndApi($app);}catch(ApiRequestException $e){Logger::logError("Erro na requisição à API: {$e->getMessage()} (URL: {$e->getRequestUrl()})");}catch(ApiResponseException $e){Logger::logError("Erro na resposta da API: {$e->getMessage()}");}catch(FileNotFoundException $e){Logger::logError("Arquivo não encontrado: {$e->getMessage()} (File: {$e->getFilePath()})");}catch(Exception $e){Logger::logError("Ocorreu um erro inesperado. Por favor, tente novamente mais tarde ou entre em contato com o suporte.");} ?>